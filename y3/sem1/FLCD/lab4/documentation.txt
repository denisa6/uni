https://github.com/denisa6/FLCD

The Symbol Table is composed of one hash table that can be used for both the identifiers table and the constants table.

Operations
1. Pair - the position in the symbol table (first - the pos in the first list, second - the position in the second list)

2. HashTable
hash(std::string key) - hash function, the result is computed by doing the sum of the characters in "key" and appling modulo of size over it
findByPos(Pair pos) - returns the elem from the given position "pos" from the hash table
getSize() - returns the size of the hash table
findPosOfTerm(std::string term) - returns an elem of type Pair with the position of "term" if it exists in the hash table, if not, it return -1
containsTerm(std::string term) - returns true/false depending on whether "term" belongs to the hash table or not
add(std::string term) - adds an element to the hash table

3. SymbolTable
same as "HashTable" methods except for "hash(std::string key)"

4. ProgramInternalForm - PIF
add(Pair<std::string, Pair<int,int>> pair, int type) - adds an element to the PIF

5. Scanner
readFile() - reads the input file line by line and gets rid of tabs
createListOfProgramElems() - splits the elems by separators
tokenize(const std::vector<std::string>& tokensToBe) - composes the strings and chars, gets rid of endlines and empty spaces
scan() - puts the tokens in PIF and ST based on their type
	0 - constants
	1 - identifiers
	2 - reserved words
	3 - operators
	4 - separators
getPIF() - getter for PIF
getSymbolTable() - getter for ST

6. FiniteAutomaton
readFromFile(const std::string& filePath) - reads the states, initial states, alphabet, final states, transitions from a file
std::vector<std::string> getStates() - returns the states
std::string getInitialState() - returns the initial state
std::vector<std::string> getAlphabet() - returns the alphabet
std::vector<std::string> getFinalStates() - returns the final states
std::map<std::pair<std::string, std::string>, std::set<std::string>> getTransitions() - returns the transitions
std::string writeTransitions() - returns a formated string of the transitions
bool acceptsSequence(const std::string& sequence) - checks if the sequence is valid or not
bool checkIfDeterministic() - checks if the FA is deterministic or not

letter ::= 'a'|'b'|...|'z'|'A'|'B'|...|'Z'
specialSymbol ::= '-'|'+'
digit ::= '0'|'1'|...|'9'
alphabetCharacter ::= letter | digit | specialSymbol
alphabet ::= alphabetCharacter;{alphabetCharacter;}
state ::= letter
listOfStates ::= state;{state;}
transition ::= state alphabet state
listOfTransitions ::= transition'\n'{transition'\n'}
initialState ::= state
finalStates ::= state;{state;}
FAfile ::= listOfStates '\n' alphabet '\n' initialState '\n'finalStates '\' transition