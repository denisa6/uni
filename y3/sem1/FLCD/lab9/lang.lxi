%{
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>

    int lines = 1;
    char errors[100][256]; // Assuming a maximum of 100 errors, each with a maximum length of 255 characters
    int error_count = 0;
%}

%option noyywrap
%option caseless
%option nodefault

DIGIT [0-9]
NON_ZERO_DIGIT [1-9]
INT_CONSTANT [+-]?{NON_ZERO_DIGIT}{DIGIT}*|0
LETTER [a-zA-Z_]
SPECIAL_CHAR [ ?:*\^+=.!]
STRING_CONSTANT (\"({LETTER}|{DIGIT}|{SPECIAL_CHAR})*\")
IDENTIFIER {LETTER}({LETTER}|{DIGIT})*
BAD_IDENTIFIER ({DIGIT})+({LETTER})+({LETTER}|{DIGIT})*

%%

"DEF"|"INT"|"STR"|"CHAR"|"IF"|"ELSE"|"READ"|"PRINT"|"DO"|"WHILE"|"FOR"|"CONST"|"RET"|"MAIN"|"LEN"|"GET_ELEM"  {printf("%s - reserved word\n", yytext);}

"+"|"-"|"*"|"/"|"<"|"<="|"="|">="|"=="|"<>"|">"|"&&"|"||"|"%"|"." printf("%s - operator\n", yytext);

{IDENTIFIER} {printf("%s - identifier\n", yytext);}

{BAD_IDENTIFIER} {sprintf(errors[error_count++], "Error at token %s at line %d\n", yytext, lines);}

{INT_CONSTANT} {printf("%s - integer constant\n", yytext);}

{STRING_CONSTANT} {printf("%s - string constant\n", yytext);}

"["|"]"|";"|"("|")"|"{"|"}"|"," printf("%s - separator\n", yytext);

[ \t]+ {}

[\n]+ {++lines;}

. {sprintf(errors[error_count++], "Error at token %s at line %d\n", yytext, lines);}

%%

int main(int argc, char** argv) {
    if (argc > 1) 
        yyin = fopen(argv[1], "r");
    else 
        yyin = stdin;
    
    yylex();

    // Print errors at the end
    for (int i = 0; i < error_count; ++i) {
        fprintf(stderr, "%s", errors[i]);
    }

    return 0;
}
