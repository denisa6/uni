even(N):- mod(N,2) =:= 0.
%15.a List->Set
function_a(List,Set):-
    list_to_set(List, Set1),
    reverse_list(Set1, Set).

nrOcc([],_,0).
nrOcc([H|T], E, R):-
    H=:=E,
    nrOcc(T,E,R1),
    R is R1 + 1.
nrOcc([H|T], E, R):-
    H=\=E,
    nrOcc(T,E,R).

list_to_set(List, Set):-
    list_to_set_helper(List, [], Set).
list_to_set_helper([], Aux, Aux).
list_to_set_helper([H|T], Aux, Set):-
    nrOcc(Aux, H, 1),
    list_to_set_helper(T, Aux, Set).
list_to_set_helper([H|T], Aux, Set):-
    nrOcc(Aux, H, 0),
    list_to_set_helper(T, [H|Aux], Set).

reverse_list([H|T], ReversedList):-
    reverse_list_helper([H|T], [], ReversedList).
reverse_list_helper([], Aux, Aux).
reverse_list_helper([H|T], Aux, ReversedList):-
    reverse_list_helper(T, [H|Aux], ReversedList).

%15.b
function_b(List, OddList, EvenList, OddNr, EvenNr):-
    split_list(List, OddList, EvenList),
    count(EvenNr, OddNr, List).

split_list(List, Odd, Even):-
    split_list_helper(List, [], [], Odd, Even).
split_list_helper([], AuxO, AuxE, AuxO, AuxE).
split_list_helper([H|T], AuxO, AuxE, Odd, Even):-
    even(H),
    split_list_helper(T, AuxO, [H|AuxE], Odd, Even).
split_list_helper([H|T], AuxO, AuxE, Odd, Even):-
    split_list_helper(T, [H|AuxO], AuxE, Odd, Even).

count(0,0,[]).
count(CountE, CountO, [H|T]):-
    even(H),
    count(CountE1, CountO, T),
    CountE is CountE1+1.
count(CountE, CountO, [H|T]):-
    count(CountE, CountO1, T),
    CountO is CountO1+1.
%need another function to merge the two lists([OddList | EvenList])