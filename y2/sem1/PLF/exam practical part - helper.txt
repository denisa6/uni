PROLOG

%insert an elem in a list 
%(E - elem, L - list, R - result)
insert(E, L, [E|L]).
insert(E, [H|T], [H|R]):-
	insert(E,T,R).

%permutations of a linear list 
%(L - list, R - result)
perm([], []).
perm([H|T], P):-
	perm(T, R),
	insert(H, R, P).

%arrangements of K eleents from a list L
%(L - list, K - number of elements, R- result)
arr([E|_], 1, [E]).
arr([_|T], K, R):-
	arr(T, K, R).
arr([H|T], K, R1):-
	K > 1,
	K1 is K - 1,
	arr(T, K1, R),
	insert(H, R, R1).

%combination of K elements from a list L
%(L - list, K - number of elements, R - result)
comb([E|_], 1, [E]).
comb([_|T], K, R):-
	comb(T, K, R).
comb([H|T], K, [H|R]):-
	K > 1,
	K1 is K - 1,
	comb(T, K1, R).

%subsets
subs([], []).
subs([H|T], [H|Tr]):-
	subs(T, Tr).
subs([_|T], Tr):-
	subs(T, Tr).

LISP

(defun myAppend (a b)
  (cond
   ((null a) b)
   (t (cons (car a) (myAppend (cdr a) b)))
   )
)

(defun maxFor2(a b)
(cond
    ((and (not (numberp a)) (not (numberp b))) nil)
    ((not (numberp b))                         a)
    ((not (numberp a))                         b)
    ((> a b)                                   a)
    (t                                         b)
)
)

(defun maxForList (l)
(cond
    ((null l)       nil)
    (t              (maxFor2 (car l) (maxForList (cdr l))))
)
)

(defun myGcd (a b)
(cond
    ((and (not (numberp a)) (not (numberp b)))   nil)
    ((not (numberp b))                           a)
    ((not (numberp a))                           b)
    ((or (= a 0) (= b 0))                        nil)
    ((= a b)                                     a)
    ((< a b)                                     (myGcd a (- b a)))
    (t                                           (myGcd (- a b) b))
)
)


