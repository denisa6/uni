INSERT INTO PublishingHouses (publisher_name, contact_person) VALUES ('Humanitas', 'Pop Ana');
INSERT INTO PublishingHouses (publisher_name, contact_person) VALUES ('Penguin Random House', 'Popescu Andrei');
INSERT INTO PublishingHouses (publisher_name, contact_person) VALUES ('Saga Press', 'John Snow');
INSERT INTO PublishingHouses (publisher_name, contact_person) VALUES ('Copper Canyon Press', 'Kat Blythe');
INSERT INTO PublishingHouses (publisher_name, contact_person) VALUES ('Murdoch Books', 'Serena Clyde');

--publishing dates 1~5
INSERT INTO Dates (date_year, date_month, date_day) VALUES (1990,5,18);
INSERT INTO Dates (date_year, date_month, date_day) VALUES (2010,7,25);
INSERT INTO Dates (date_year, date_month, date_day) VALUES (2002,9,9);
INSERT INTO Dates (date_year, date_month, date_day) VALUES (2020,5,9);
INSERT INTO Dates (date_year, date_month, date_day) VALUES (2022,10,22);
--dob 6~13
INSERT INTO Dates (date_year, date_month, date_day) VALUES (2000,5,15);
INSERT INTO Dates (date_year, date_month, date_day) VALUES (2003,6,12);
INSERT INTO Dates (date_year, date_month, date_day) VALUES (1998,10,5);
INSERT INTO Dates (date_year, date_month, date_day) VALUES (1985,2,2);
INSERT INTO Dates (date_year, date_month, date_day) VALUES (2001,11,22);
INSERT INTO Dates (date_year, date_month, date_day) VALUES (1976,7,12);
INSERT INTO Dates (date_year, date_month, date_day) VALUES (2000,7,29);
INSERT INTO Dates (date_year, date_month, date_day) VALUES (1996,1,5);
--purchase dates 14~20
INSERT INTO Dates (date_year, date_month, date_day) VALUES (2022,11,22);
INSERT INTO Dates (date_year, date_month, date_day) VALUES (2022,5,15);
INSERT INTO Dates (date_year, date_month, date_day) VALUES (2022,3,13);
INSERT INTO Dates (date_year, date_month, date_day) VALUES (2021,2,22);
INSERT INTO Dates (date_year, date_month, date_day) VALUES (2020,9,5);
INSERT INTO Dates (date_year, date_month, date_day) VALUES (2019,5,23);
INSERT INTO Dates (date_year, date_month, date_day) VALUES (2018,8,1);

INSERT INTO Books (title, publisher_id, stock,publishing_date_id) VALUES ('The Invisible Life of Addie LaRue', 2, 7, 4);
INSERT INTO Books (title, publisher_id, stock,publishing_date_id) VALUES ('If we were villains', 4, 15, 2);
INSERT INTO Books (title, publisher_id, stock,publishing_date_id) VALUES ('Mexican Gothic', 5, 8, 4);
INSERT INTO Books (title, publisher_id, stock,publishing_date_id) VALUES ('Good Omens', 5, 30, 1);
INSERT INTO Books (title, publisher_id, stock,publishing_date_id) VALUES ('Stardust', 1, 16, 3);

INSERT INTO Genres (genre_name) VALUES ('horror');
INSERT INTO Genres (genre_name) VALUES ('romance');
INSERT INTO Genres (genre_name) VALUES ('mystery');
INSERT INTO Genres (genre_name) VALUES ('true crime');
INSERT INTO Genres (genre_name) VALUES ('fantasy');

INSERT INTO BookGenres (book_id, genre_id) VALUES (1,2);
INSERT INTO BookGenres (book_id, genre_id) VALUES (1,5);
INSERT INTO BookGenres (book_id, genre_id) VALUES (2,3);
INSERT INTO BookGenres (book_id, genre_id) VALUES (3,1);
INSERT INTO BookGenres (book_id, genre_id) VALUES (4,5);
INSERT INTO BookGenres (book_id, genre_id) VALUES (5,5);

INSERT INTO Authors (first_name, last_name) VALUES ('Victoria', 'Schwab');
INSERT INTO Authors (first_name, last_name) VALUES ('M.L', 'Rio');
INSERT INTO Authors (first_name, last_name) VALUES ('Neil', 'Gaiman');
INSERT INTO Authors (first_name, last_name) VALUES ('Terry', 'Pratchett');
INSERT INTO Authors (first_name, last_name) VALUES ('Silvia', 'Moreno-Garcia');
INSERT INTO Authors (first_name, last_name) VALUES ('Olivie', 'Blake');

INSERT INTO BooksAuthors (book_id, author_id) VALUES (1,1);
INSERT INTO BooksAuthors (book_id, author_id) VALUES (2,2);
INSERT INTO BooksAuthors (book_id, author_id) VALUES (3,5);
INSERT INTO BooksAuthors (book_id, author_id) VALUES (4,3);
INSERT INTO BooksAuthors (book_id, author_id) VALUES (4,4);
INSERT INTO BooksAuthors (book_id, author_id) VALUES (5,3);

INSERT INTO Employees (first_name, last_name, telephone, dob_id) VALUES ('Marcy', 'Johnes', '0784962007', 7);
INSERT INTO Employees (first_name, last_name, telephone, dob_id) VALUES ('Lily', 'Cormac', '0789345445', 13);
INSERT INTO Employees (first_name, last_name, telephone, dob_id) VALUES ('Jake', 'Rivers', '0749438055', 9);
INSERT INTO Employees (first_name, last_name, telephone, dob_id) VALUES ('Pheobe', 'Rogers', '0715561329', 8);
INSERT INTO Employees (first_name, last_name, telephone, dob_id) VALUES ('Toby', 'Brenner', '0799832265', 10);
INSERT INTO Employees (first_name, last_name, telephone, dob_id) VALUES ('Jane', 'Smith', '0746471007', 12);

INSERT INTO OnlineCustomers (first_name, last_name, telephone, country, city, customer_address) VALUES ('Alys', 'Orson', '0766614222', 'England', 'Bristol', 'St Aubyns Avenue');
INSERT INTO OnlineCustomers (first_name, last_name, telephone, country, city, customer_address) VALUES ('Timothy', 'Eveline', '0748515663', 'Wales', 'Cardiff', 'Royston Meadows');
INSERT INTO OnlineCustomers (first_name, last_name, telephone, country, city, customer_address) VALUES ('Wilburn', 'Lecia', '07999251558', 'Ireland', 'Dublin', 'Grovebury Road');
INSERT INTO OnlineCustomers (first_name, last_name, telephone, country, city, customer_address) VALUES ('Avalon', 'Faron', '0746951289', 'Wales', 'Newport', 'Davenport Promenade');
INSERT INTO OnlineCustomers (first_name, last_name, telephone, country, city, customer_address) VALUES ('Drea', 'Dayton', '0787746282', 'Ireland', 'Cork', 'Stonebench Lane');

INSERT INTO OnlineSales (customer_id, book_id, purchase_date_id, cost) VALUES (4,2,15,45);
INSERT INTO OnlineSales (customer_id, book_id, purchase_date_id, cost) VALUES (4,5,17,50);
INSERT INTO OnlineSales (customer_id, book_id, purchase_date_id, cost) VALUES (1,3,16,37);
INSERT INTO OnlineSales (customer_id, book_id, purchase_date_id, cost) VALUES (5,5,20,42);
INSERT INTO OnlineSales (customer_id, book_id, purchase_date_id, cost) VALUES (2,4,14,36);

INSERT INTO PhysicalSales (employee_id, book_id, purchase_date_id, cost) VALUES (2,1,16,47);
INSERT INTO PhysicalSales (employee_id, book_id, purchase_date_id, cost) VALUES (3,3,18,37);
INSERT INTO PhysicalSales (employee_id, book_id, purchase_date_id, cost) VALUES (5,1,20,29);
INSERT INTO PhysicalSales (employee_id, book_id, purchase_date_id, cost) VALUES (5,2,19,30);
INSERT INTO PhysicalSales (employee_id, book_id, purchase_date_id, cost) VALUES (2,4,15,50);

INSERT INTO Reviews (customer_id, book_id, stars, details) VALUES (4,5,4,'great');
INSERT INTO Reviews (customer_id, book_id, stars, details) VALUES (2,4,5,'amazing');
INSERT INTO Reviews (customer_id, book_id, stars, details) VALUES (1,3,3,'ok');
INSERT INTO Reviews (customer_id, book_id, stars, details) VALUES (3,1,5,'incredible');
INSERT INTO Reviews (customer_id, book_id, stars, details) VALUES (4,2,1,'boring');

---------------------------------------------------------------------------------
/*
{AND, OR, NOT} - delete 1
{<,<=,=,>,>=,<>} - update 3
IS [NOT] NULL - update 1
IN - update 3
BETWEEN - update 2
LIKE - delete 2
*/
-- update for at least 3 tables
-- appoint Jean Grey to all publishing houses without a contact person
INSERT INTO PublishingHouses (publisher_name) VALUES ('Argonaut');
UPDATE PublishingHouses
SET contact_person = 'Jean Grey'
WHERE contact_person IS NULL;
SELECT * FROM PublishingHouses;

-- increase the cost of the books that were sold online to customers with ids between 3 and 4
UPDATE OnlineSales
SET cost = cost+1
WHERE customer_id BETWEEN 3 AND 4;
SELECT * FROM OnlineSales;

-- change details of the reviews of books with id 2 and 3 that have less than 4 stars
UPDATE Reviews
SET details = 'anticlimactic'
WHERE stars < 4 AND book_id IN (2,3);
SELECT * FROM Reviews;

-- delete for at least 2 tables
-- delete the employee jesus christ
INSERT INTO Employees (first_name, last_name, telephone, dob_id) VALUES ('Jesus', 'Christ', '0799832265', 10);
DELETE FROM Employees WHERE first_name = 'Jesus' AND last_name = 'Christ';
SELECT * FROM Employees;

-- delete all authors whose first name starts with 'Sa'
INSERT INTO Authors (first_name, last_name) VALUES ('Sarah', 'Dessen');
INSERT INTO Authors (first_name, last_name) VALUES ('Samantha', 'Shannon');
DELETE FROM Authors WHERE first_name LIKE 'Sa%';
SELECT * FROM Authors;



-------------------------------------------------
-- a. 2 queries with the union operation; use UNION [ALL] and OR;
-- display all emplyees/authors whose names start with M
SELECT first_name FROM Employees
WHERE first_name LIKE 'M%'
UNION ALL
SELECT first_name FROM Authors
WHERE first_name LIKE 'M%';

-- select top 2 customers who live in Wales or their first name starts with A
SELECT TOP 2 country, first_name, last_name FROM OnlineCustomers
WHERE country = 'Wales' OR first_name LIKE 'A%';

-- b. 2 queries with the intersection operation; use INTERSECT and IN;
-- display all the ids of the customers who live in Wales and left reviews with at least 3 stars 
SELECT customer_id
FROM OnlineCustomers
WHERE country = 'Wales'
INTERSECT
SELECT customer_id
FROM Reviews
WHERE stars > 3;

-- display all the names of the emplyees who sold the book with id = 1
SELECT first_name, last_name
FROM Employees
WHERE employee_id IN (SELECT employee_id
					  FROM PhysicalSales
					  WHERE book_id = 1);

-- c. 2 queries with the difference operation; use EXCEPT and NOT IN;
-- display all books ids that have at least 15 pieces left in stock and have been reviewed with at least 3 stars
SELECT book_id
FROM Books
WHERE stock > 15
EXCEPT
SELECT book_id
FROM Reviews
WHERE stars < 3;

SELECT * FROM Books;
SELECT * FROM Reviews;

-- display all books that have an id smaller greater than 2 but have not been described as great in reviews
SELECT book_id
FROM Books
WHERE book_id > 2 AND book_id NOT IN (SELECT book_id
									  FROM Reviews
									  WHERE details = 'great');

-- d. 4 queries with INNER JOIN, LEFT JOIN, RIGHT JOIN, and FULL JOIN (one query per operator); one query will join at least 3 tables, 
-- while another one will join at least two many-to-many relationships;

-- INNER/3 TABLES
-- select all books who have been rated more than 2 stars and whose publishing house's contact person's name contains an 'o'
SELECT Books.book_id, Books.title, PublishingHouses.contact_person, Reviews.stars
FROM Books
INNER JOIN PublishingHouses ON Books.publisher_id = PublishingHouses.publisher_id AND PublishingHouses.contact_person LIKE '%o%'
INNER JOIN Reviews ON Books.book_id = Reviews.book_id AND Reviews.stars > 2;

SELECT * FROM Books;
SELECT * FROM PublishingHouses;
SELECT * FROM Reviews;
-- LEFT
-- select all customers and the books they have purchased
SELECT OnlineCustomers.first_name, OnlineCustomers.last_name, Books.title
FROM OnlineCustomers
LEFT JOIN OnlineSales ON OnlineCustomers.customer_id = OnlineSales.customer_id
INNER JOIN Books ON OnlineSales.book_id = Books.book_id;

SELECT * FROM OnlineCustomers;
SELECT * FROM OnlineSales;
SELECT * FROM Books;

-- RIGHT
-- display all employees and the books they have sold
SELECT Employees.first_name, Employees.last_name, Books.title
FROM PhysicalSales
RIGHT JOIN Employees ON Employees.employee_id = PhysicalSales.employee_id
LEFT JOIN Books ON PhysicalSales.book_id = Books.book_id;

SELECT * FROM Employees;
SELECT * FROM PhysicalSales;
SELECT * FROM Books;
-- FULL / 2 mn
-- display all books/authors/genres with their corresponding whatever
SELECT Books.book_id, Books.title, Authors.first_name, Authors.last_name, Genres.genre_name
FROM Books
FULL JOIN BooksAuthors ON Books.book_id = BooksAuthors.book_id
FULL JOIN Authors ON Authors.author_id = BooksAuthors.author_id
FULL JOIN BookGenres ON Books.book_id = BookGenres.book_id
FULL JOIN Genres ON BookGenres.genre_id = Genres.genre_id;

SELECT * FROM Books;
SELECT * FROM Authors;
SELECT * FROM BooksAuthors;

-- e. 2 queries with the IN operator and a subquery in the WHERE clause; in at least one case, the subquery must include a subquery in its own WHERE clause;
-- display top 3 books whose genre is fantasy
SELECT DISTINCT TOP 3 book_id
FROM BookGenres
WHERE genre_id IN (SELECT genre_id
				   FROM Genres
				   WHERE genre_name = 'fantasy');

-- display all emplyees that have sold a book whose title starts with T
SELECT first_name, last_name
FROM Employees
WHERE employee_id IN (SELECT employee_id
					  FROM PhysicalSales
					  WHERE book_id IN (SELECT book_id
										FROM Books
										WHERE title LIKE 'T%')
					  );
SELECT * FROM Employees;
SELECT * FROM Books;
SELECT * FROM PhysicalSales;

-- f. 2 queries with the EXISTS operator and a subquery in the WHERE clause;
-- display all the names of the customers who have purchased something online
SELECT first_name, last_name
FROM OnlineCustomers
WHERE EXISTS (SELECT book_id FROM OnlineSales WHERE OnlineSales.customer_id = OnlineCustomers.customer_id);

SELECT * FROM OnlineCustomers;
SELECT * FROM OnlineSales;

-- display all the distinct publishing dates of books that have at least 10 pieces in stock
SELECT DISTINCT date_day, date_month, date_year
FROM Dates
WHERE EXISTS (SELECT publishing_date_id FROM Books WHERE Books.stock >= 10 AND Books.book_id = Dates.date_day);

SELECT * FROM Dates;
SELECT * FROM Books;

-- g. 2 queries with a subquery in the FROM clause;
-- display the title and name of the author of the books that are at least 10 in stock and whose author's first name starts with N
SELECT ReqBooks.title, ReqAuthors.first_name, ReqAuthors.last_name FROM
(SELECT title, book_id FROM Books WHERE stock > 10) as ReqBooks, (SELECT first_name, last_name, author_id FROM Authors WHERE first_name LIKE 'N%') as ReqAuthors, BooksAuthors
WHERE ReqBooks.book_id = BooksAuthors.book_id AND ReqAuthors.author_id = BooksAuthors.author_id;

SELECT * FROM Books;
SELECT * FROM Authors;
SELECT * FROM BooksAuthors;

-- display all employees whose date of birth is of the format: even number for year, odd number for month
SELECT Employees.first_name, Employees.last_name FROM
(SELECT date_id FROM Dates WHERE date_year % 2 = 0 AND date_month % 2 = 1) as ReqDates, Employees
WHERE ReqDates.date_id = Employees.dob_id;

SELECT * FROM Employees;
SELECT * FROM Dates;

-- h. 4 queries with the GROUP BY clause, 3 of which also contain the HAVING clause; 2 of the latter will also have a
-- subquery in the HAVING clause; use the aggregation operators: COUNT, SUM, AVG, MIN, MAX;

-- select all countries where at least two customers live in descending order
SELECT country, COUNT(customer_id)
FROM OnlineCustomers
GROUP BY country
HAVING COUNT(customer_id) > 1
ORDER BY country DESC;

-- display all online select whose price is greater than the average of the cost of all physical sales
SELECT COUNT(customer_id), cost
FROM OnlineSales
GROUP BY cost
HAVING OnlineSales.cost > (SELECT AVG(cost) FROM PhysicalSales);

-- display all physical sales whose price is smaller than the maximum of the cost of all online sales
SELECT COUNT(employee_id), cost
FROM PhysicalSales
GROUP BY cost
HAVING PhysicalSales.cost < (SELECT MAX(cost) FROM OnlineSales);

-- display all the countries where customers live in descending order of the number of customers that live in them
SELECT country, COUNT(customer_id)
FROM OnlineCustomers
GROUP BY country
ORDER BY COUNT(customer_id) DESC;

-- i. 4 queries using ANY and ALL to introduce a subquery in the WHERE clause (2 queries per operator); rewrite 2 of them
-- with aggregation operators, and the other 2 with IN / [NOT] IN.
-- select all authors of books whose title includes the letter o (ANY)
SELECT first_name, last_name
FROM Authors
WHERE author_id = ANY 
(SELECT author_id
FROM BooksAuthors
WHERE book_id = ANY
(SELECT book_id
FROM Books
WHERE title LIKE '%o%')
);
/*
SELECT * FROM Authors;
SELECT * FROM Books;
SELECT * FROM BooksAuthors;
*/
-- rewriten with IN
SELECT first_name, last_name
FROM Authors
WHERE author_id IN 
(SELECT author_id
FROM BooksAuthors
WHERE book_id IN
(SELECT book_id
FROM Books
WHERE title LIKE '%o%')
);

-- select all employees who are born after 1999 (ANY)
SELECT first_name, last_name
FROM Employees
WHERE dob_id = ANY
(SELECT date_id
FROM Dates
WHERE date_year > 1999);
/*
SELECT * FROM Employees;
SELECT * FROM Dates;
*/
-- rewrite NOT IN
SELECT first_name, last_name
FROM Employees
WHERE dob_id NOT IN
(SELECT date_id
FROM Dates
WHERE date_year <= 1999);

-- ALL
-- display all books whose stock is greater than the book with id 2
SELECT B1.book_id, B1.title
FROM Books B1
WHERE B1.stock > ALL
(SELECT B2.stock
FROM Books B2
WHERE book_id = 2);

SELECT * FROM Books;
-- select all books that have been sold for less than book with id 3
-- (books can be sold for diff prices depending on the period in which the purchase has been made)
SELECT DISTINCT O1.book_id
FROM OnlineSales O1
WHERE O1.cost > ALL
(SELECT O2.cost
FROM OnlineSales O2
WHERE O2.book_id = 3);

SELECT * FROM OnlineSales;
-- arithmetic expressions in the SELECT clause in at least 3 queries;
-- conditions with AND, OR, NOT, and parentheses in the WHERE clause in at least 3 queries;
-- DISTINCT in at least 3 queries -> f, i, e
-- ORDER BY in at least 2 queries -> h, h
-- TOP in at least 2 queries. -> a, e
